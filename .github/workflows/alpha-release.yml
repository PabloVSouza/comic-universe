name: Build/release Electron app

on:
  push:
    tags:
      - v*.*.*-alpha.*
jobs:
  Linux:
    runs-on: ${{ matrix.os }}
    permissions: write-all
    env:
      GH_TOKEN: ${{ secrets.ACCESS_TOKEN }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        architecture: [x64, arm64]
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Dependencies
        run: npm install

      - name: build-linux-x64
        if: matrix.architecture == 'x64' && matrix.os == 'ubuntu-latest'
        run: npm run build:linux-x64

      - name: build-linux-arm
        if: matrix.architecture == 'arm64' && matrix.os == 'ubuntu-latest'
        run: npm run build:linux-arm

      - name: Generate release notes
        run: |
          # Get the previous tag or use HEAD~10 as fallback
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "HEAD~10")
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          ./scripts/generate-release-notes.sh $PREVIOUS_TAG HEAD >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: release
        uses: softprops/action-gh-release@v2
        continue-on-error: true
        with:
          prerelease: true
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          name: ${{ github.event.inputs.tag_name || github.ref_name }}
          target_commitish: ${{ github.sha }}
          body: ${{ env.RELEASE_NOTES }}
          files: |
            dist/*.exe
            dist/*.zip
            dist/*.dmg
            dist/*.AppImage
            dist/*.snap
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.yml
            dist/*.blockmap
          generate_release_notes: false
          fail_on_unmatched_files: false
  Windows:
    runs-on: windows-latest
    permissions: write-all
    env:
      GH_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      # Force code signing for PR builds
      CSC_FOR_PULL_REQUEST: true
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Dependencies
        run: npm install

      - name: Generate Self-Signed Certificate
        run: |
          # Create certificates directory
          mkdir -p certificates

          # Generate self-signed certificate
          openssl req -x509 -newkey rsa:2048 -keyout certificates/cert-key.pem -out certificates/cert.pem -days 365 -nodes -subj "/C=US/ST=CA/L=San Francisco/O=Comic Universe/CN=Comic Universe"

          # Convert to PKCS#12 format
          openssl pkcs12 -export -out certificates/cert.p12 -inkey certificates/cert-key.pem -in certificates/cert.pem -name "Comic Universe" -passout pass:comicuniverse

          # Set environment variables for electron-builder
          echo "CSC_LINK=certificates/cert.p12" >> $env:GITHUB_ENV
          echo "CSC_KEY_PASSWORD=comicuniverse" >> $env:GITHUB_ENV

      - name: build-win
        run: npm run build:win

      - name: release
        uses: softprops/action-gh-release@v2

        with:
          prerelease: true
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          name: ${{ github.event.inputs.tag_name || github.ref_name }}
          target_commitish: ${{ github.sha }}
          files: |
            dist/*.exe
            dist/*.zip
            dist/*.dmg
            dist/*.AppImage
            dist/*.snap
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.yml
  Mac:
    runs-on: macos-14
    permissions: write-all
    env:
      GH_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      # Force code signing for PR builds
      CSC_FOR_PULL_REQUEST: true
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Dependencies
        run: npm install

      - name: Setup Consistent Certificate from Secrets
        run: |
          # Create certificates directory
          mkdir -p certificates

          # Use a fixed seed for consistent certificate generation
          # This ensures the same certificate is generated every time
          CERT_SEED="comic-universe-consistent-cert-2024"
          
          # Create config file for certificate with proper key usage
          cat > certificates/cert.conf << EOF
          [req]
          distinguished_name = req_distinguished_name
          x509_extensions = v3_req
          prompt = no

          [req_distinguished_name]
          C = US
          ST = CA
          L = San Francisco
          O = Comic Universe
          CN = Comic Universe

          [v3_req]
          keyUsage = critical, digitalSignature, keyEncipherment
          extendedKeyUsage = critical, codeSigning
          subjectKeyIdentifier = hash
          EOF

          # Generate self-signed certificate with consistent seed
          openssl req -x509 -newkey rsa:2048 -keyout certificates/cert-key.pem -out certificates/cert.pem -days 365 -nodes -config certificates/cert.conf -extensions v3_req -subj "/C=US/ST=CA/L=San Francisco/O=Comic Universe/CN=Comic Universe" -passin pass:$CERT_SEED

          # Convert to PKCS#12 format
          openssl pkcs12 -export -out certificates/cert.p12 -inkey certificates/cert-key.pem -in certificates/cert.pem -name "Comic Universe" -passout pass:comicuniverse

          # Import certificate into keychain for macOS code signing
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificates/cert.p12 -k build.keychain -P comicuniverse -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

          # Set environment variables for electron-builder
          echo "CSC_LINK=certificates/cert.p12" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=comicuniverse" >> $GITHUB_ENV

      - name: build-mac-universal
        run: npm run build:mac

      - name: release
        uses: softprops/action-gh-release@v2

        with:
          prerelease: true
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          name: ${{ github.event.inputs.tag_name || github.ref_name }}
          target_commitish: ${{ github.sha }}
          files: |
            dist/*.exe
            dist/*.zip
            dist/*.dmg
            dist/*.AppImage
            dist/*.snap
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.yml
            dist/*.blockmap
