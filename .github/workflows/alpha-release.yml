name: Build/release Electron app

on:
  push:
    tags:
      - v*.*.*-alpha.*
jobs:
  Linux:
    runs-on: ${{ matrix.os }}
    permissions: write-all
    env:
      GH_TOKEN: ${{ secrets.ACCESS_TOKEN }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        architecture: [x64, arm64]
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Dependencies
        run: npm install

      - name: build-linux-x64
        if: matrix.architecture == 'x64' && matrix.os == 'ubuntu-latest'
        run: npm run build:linux-x64

      - name: build-linux-arm
        if: matrix.architecture == 'arm64' && matrix.os == 'ubuntu-latest'
        run: npm run build:linux-arm

      - name: Generate release notes
        run: |
          # Get the previous tag or use HEAD~10 as fallback
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "HEAD~10")
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          ./scripts/generate-release-notes.sh $PREVIOUS_TAG HEAD >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: release
        uses: softprops/action-gh-release@v2
        continue-on-error: true
        with:
          prerelease: true
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          name: ${{ github.event.inputs.tag_name || github.ref_name }}
          target_commitish: ${{ github.sha }}
          body: ${{ env.RELEASE_NOTES }}
          files: |
            dist/*.exe
            dist/*.zip
            dist/*.dmg
            dist/*.AppImage
            dist/*.snap
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.yml
            dist/*.blockmap
          generate_release_notes: false
          fail_on_unmatched_files: false
  Windows:
    runs-on: windows-latest
    permissions: write-all
    env:
      GH_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      # Force code signing for PR builds
      CSC_FOR_PULL_REQUEST: true
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Dependencies
        run: npm install

      - name: Setup Consistent Certificate from Secrets
        run: |
          mkdir -p certificates
          $bytes = [System.Convert]::FromBase64String("${{ secrets.CSC_LINK_BASE64 }}")
          [System.IO.File]::WriteAllBytes("certificates/cert.p12", $bytes)
          echo "CSC_LINK=certificates/cert.p12" >> $env:GITHUB_ENV
          echo "CSC_KEY_PASSWORD=${{ secrets.CSC_KEY_PASSWORD }}" >> $env:GITHUB_ENV

      - name: build-win
        run: npm run build:win

      - name: release
        uses: softprops/action-gh-release@v2

        with:
          prerelease: true
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          name: ${{ github.event.inputs.tag_name || github.ref_name }}
          target_commitish: ${{ github.sha }}
          files: |
            dist/*.exe
            dist/*.zip
            dist/*.dmg
            dist/*.AppImage
            dist/*.snap
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.yml
  Mac:
    runs-on: macos-14
    permissions: write-all
    env:
      GH_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      # Force code signing for PR builds
      CSC_FOR_PULL_REQUEST: true
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Dependencies
        run: npm install

      - name: Setup Consistent Certificate from Secrets
        run: |
            mkdir -p certificates
            echo "${{ secrets.CSC_LINK_BASE64 }}" | base64 --decode > certificates/cert.p12
            echo "CSC_LINK=certificates/cert.p12" >> $GITHUB_ENV
            echo "CSC_KEY_PASSWORD=${{ secrets.CSC_KEY_PASSWORD }}" >> $GITHUB_ENV
            security create-keychain -p "" build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "" build.keychain
            security import certificates/cert.p12 -k build.keychain -P "${{ secrets.CSC_KEY_PASSWORD }}" -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
            # Extract certificate and make it trusted
            openssl pkcs12 -in certificates/cert.p12 -out certificates/cert.pem -nokeys -passin pass:"${{ secrets.CSC_KEY_PASSWORD }}"
            security add-trusted-cert -d -r trustRoot -k build.keychain certificates/cert.pem

      - name: build-mac-universal
        run: npm run build:mac

      - name: release
        uses: softprops/action-gh-release@v2

        with:
          prerelease: true
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          name: ${{ github.event.inputs.tag_name || github.ref_name }}
          target_commitish: ${{ github.sha }}
          files: |
            dist/*.exe
            dist/*.zip
            dist/*.dmg
            dist/*.AppImage
            dist/*.snap
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.yml
            dist/*.blockmap
