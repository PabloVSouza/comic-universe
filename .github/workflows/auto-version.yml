name: Auto Versioning

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

jobs:
  auto-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      release-type: ${{ steps.version.outputs.release-type }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine version strategy
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"

          # Extract base version (remove pre-release identifiers)
          BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-.*//')

          # Determine release type based on branch/event
          # Get the latest release to determine next build number
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[0].tag_name // "v0.0.0"')
          echo "Latest release: $LATEST_RELEASE"

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Only create beta releases for PRs to main/staging, not dev branches
            RELEASE_TYPE="beta"
            IS_PRERELEASE="true"
            # Extract build number from latest release or start from 1
            # Handle both old timestamp format and new semantic format
            if [[ $LATEST_RELEASE =~ v${BASE_VERSION}-(alpha|beta)\.([0-9]{14}) ]]; then
              # Old timestamp format - start from 1
              BUILD_NUMBER=1
            elif [[ $LATEST_RELEASE =~ v${BASE_VERSION}-(alpha|beta)\.([0-9]+) ]]; then
              # New semantic format - increment build number
              BUILD_NUMBER=$(( ${BASH_REMATCH[2]} + 1 ))
            else
              BUILD_NUMBER=1
            fi
            NEW_VERSION="${BASE_VERSION}-beta.${BUILD_NUMBER}"
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]] || [[ "${{ github.ref }}" == "refs/heads/dev/v2.0.0" ]]; then
            RELEASE_TYPE="alpha"
            IS_PRERELEASE="true"
            # For alpha releases, check if current version is already an alpha version
            if [[ $CURRENT_VERSION =~ ${BASE_VERSION}-alpha\.([0-9]+) ]]; then
              # Current version is already alpha, increment the build number
              BUILD_NUMBER=$(( ${BASH_REMATCH[1]} + 1 ))
            else
              # Current version is not alpha, start from 1
              BUILD_NUMBER=1
            fi
            NEW_VERSION="${BASE_VERSION}-alpha.${BUILD_NUMBER}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            RELEASE_TYPE="stable"
            IS_PRERELEASE="false"
            # Stable version: increment patch version
            NEW_VERSION=$(echo $BASE_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          else
            RELEASE_TYPE="dev"
            IS_PRERELEASE="true"
            # Extract build number from latest release or start from 1
            # Handle both old timestamp format and new semantic format
            if [[ $LATEST_RELEASE =~ v${BASE_VERSION}-(alpha|beta|dev)\.([0-9]{14}) ]]; then
              # Old timestamp format - start from 1
              BUILD_NUMBER=1
            elif [[ $LATEST_RELEASE =~ v${BASE_VERSION}-(alpha|beta|dev)\.([0-9]+) ]]; then
              # New semantic format - increment build number
              BUILD_NUMBER=$(( ${BASH_REMATCH[2]} + 1 ))
            else
              BUILD_NUMBER=1
            fi
            NEW_VERSION="${BASE_VERSION}-dev.${BUILD_NUMBER}"
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          echo "Release type: $RELEASE_TYPE"
          echo "Is prerelease: $IS_PRERELEASE"

      - name: Update package.json version
        if: steps.version.outputs.version != steps.current-version.outputs.current-version
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          echo "Updated package.json to version ${{ steps.version.outputs.version }}"

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog based on commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=10)
          fi

          if [[ -z "$CHANGELOG" ]]; then
            CHANGELOG="- No changes detected"
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit version changes
        if: steps.version.outputs.version != steps.current-version.outputs.current-version && github.event_name == 'push'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }} [skip ci]"
          git push

      - name: Create Git Tag
        if: steps.version.outputs.version != steps.current-version.outputs.current-version && github.event_name == 'push'
        run: |
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release ${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Create Release
        if: steps.version.outputs.version != steps.current-version.outputs.current-version
        uses: softprops/action-gh-release@v2
        with:
          tag_name: 'v${{ steps.version.outputs.version }}'
          name: 'Release ${{ steps.version.outputs.version }}'
          body: |
            ## Changes in this release

            ${{ steps.changelog.outputs.changelog }}

            ## Release Type
            **${{ steps.version.outputs.release-type }}**

            ## Installation
            Download the appropriate build for your platform from the assets below.
          draft: ${{ steps.version.outputs.release-type == 'stable' }}
          prerelease: ${{ steps.version.outputs.is-prerelease == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Beta Release Created**
              
              Version: \`${{ steps.version.outputs.version }}\`
              Release Type: **${{ steps.version.outputs.release-type }}**
              
              A beta release has been created for testing. Check the [releases page](https://github.com/${{ github.repository }}/releases) for download links.`
            })
