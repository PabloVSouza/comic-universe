name: Beta Release (Pull Requests)

on:
  pull_request:
    branches:
      - main
      - staging
    types: [opened, synchronize, reopened]

jobs:
  prepare-beta:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.beta-version.outputs.beta-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Generate beta version
        id: beta-version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
          BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-.*//')
          BETA_VERSION="${BASE_VERSION}-beta.$(date +%Y%m%d%H%M%S)"
          echo "beta-version=$BETA_VERSION" >> $GITHUB_OUTPUT
          echo "Beta version: $BETA_VERSION"

      - name: Update package.json version
        run: |
          npm version ${{ steps.beta-version.outputs.beta-version }} --no-git-tag-version
          echo "Updated package.json to version ${{ steps.beta-version.outputs.beta-version }}"

      - name: Upload version files
        uses: actions/upload-artifact@v4
        with:
          name: version-files
          path: |
            package.json
            package-lock.json

  build-linux:
    runs-on: ubuntu-latest
    needs: prepare-beta
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build application (Linux)
        run: npm run build:linux-x64

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: dist/*.AppImage

  build-windows:
    runs-on: windows-latest
    needs: prepare-beta
    env:
      # Force code signing for PR builds
      CSC_FOR_PULL_REQUEST: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Generate Self-Signed Certificate
        run: |
          # Create certificates directory
          mkdir -p certificates
          
          # Generate self-signed certificate
          openssl req -x509 -newkey rsa:2048 -keyout certificates/cert-key.pem -out certificates/cert.pem -days 365 -nodes -subj "/C=US/ST=CA/L=San Francisco/O=Comic Universe/CN=Comic Universe"
          
          # Convert to PKCS#12 format
          openssl pkcs12 -export -out certificates/cert.p12 -inkey certificates/cert-key.pem -in certificates/cert.pem -name "Comic Universe" -passout pass:comicuniverse
          
          # Set environment variables for electron-builder
          echo "CSC_LINK=certificates/cert.p12" >> $env:GITHUB_ENV
          echo "CSC_KEY_PASSWORD=comicuniverse" >> $env:GITHUB_ENV

      - name: Build application (Windows)
        run: npm run build:win

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: dist/*.exe

  build-macos:
    runs-on: macos-latest
    needs: prepare-beta
    env:
      # Force code signing for PR builds
      CSC_FOR_PULL_REQUEST: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Generate Self-Signed Certificate
        run: |
          # Create certificates directory
          mkdir -p certificates
          
          # Generate self-signed certificate
          openssl req -x509 -newkey rsa:2048 -keyout certificates/cert-key.pem -out certificates/cert.pem -days 365 -nodes -subj "/C=US/ST=CA/L=San Francisco/O=Comic Universe/CN=Comic Universe"
          
          # Convert to PKCS#12 format
          openssl pkcs12 -export -out certificates/cert.p12 -inkey certificates/cert-key.pem -in certificates/cert.pem -name "Comic Universe" -passout pass:comicuniverse
          
          # Set environment variables for electron-builder
          echo "CSC_LINK=certificates/cert.p12" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=comicuniverse" >> $GITHUB_ENV

      - name: Build application (macOS)
        run: npm run build:mac

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: dist/*.dmg

  beta-release:
    runs-on: ubuntu-latest
    needs: [prepare-beta, build-linux, build-windows, build-macos]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create beta release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: 'v${{ needs.prepare-beta.outputs.version }}'
          name: 'Beta Release ${{ needs.prepare-beta.outputs.version }}'
          body: |
            ## ðŸ§ª Beta Release for PR #${{ github.event.number }}

            This is a beta release created automatically for testing purposes.

            **PR:** #${{ github.event.number }}
            **Branch:** `${{ github.head_ref }}`
            **Target:** `${{ github.base_ref }}`
            **Auto-cleanup:** This release will be automatically deleted if PR #${{ github.event.number }} is closed without merging.

            ## Changes
            ${{ github.event.pull_request.body }}

            ## Testing
            Please test this beta release and provide feedback in the PR comments.

            ## Installation
            Download the appropriate build for your platform from the assets below.

            ## Code Signing
            All builds are automatically signed with self-signed certificates. Users may see security warnings - this is normal for self-signed certificates.
          files: |
            linux-builds/*
            windows-builds/*
            macos-builds/*
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ§ª **Beta Release Created**
              
              Version: \`${{ needs.prepare-beta.outputs.version }}\`
              
              A beta release has been created for testing this PR. You can download it from the [releases page](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare-beta.outputs.version }}).
              
              Please test the beta release and provide feedback in the comments below.`
            })
