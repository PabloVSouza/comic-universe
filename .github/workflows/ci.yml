name: Continuous Integration

on:
  push:
    branches:
      - main
      - staging
      - 'dev/v2.0.0'
      - 'dev/**'
  pull_request:
    branches:
      - main
      - staging
      - 'dev/v2.0.0'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run typecheck

      - name: Run linting
        run: npm run lint

      - name: Run formatting check
        run: npm run format -- --check

      - name: Build application
        run: npm run build

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high || true

      - name: Check for critical vulnerabilities
        run: |
          if npm audit --audit-level=critical --json | jq -e '.vulnerabilities | length > 0' > /dev/null; then
            echo "Critical severity vulnerabilities found!"
            npm audit --audit-level=critical
            exit 1
          else
            echo "No critical severity vulnerabilities found."
          fi

  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test build process
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            npm run build:linux-x64
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            npm run build:win
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            npm run build:mac
          fi

      - name: Verify build artifacts
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            ls -la dist/
            test -f dist/*.AppImage || test -f dist/*.deb || test -f dist/*.rpm
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            ls -la dist/
            test -f dist/*.exe
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            ls -la dist/
            test -f dist/*.dmg
          fi
