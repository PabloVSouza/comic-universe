name: Development Release

on:
  pull_request:
    branches:
      - staging
      - dev/v2.0.0

jobs:
  prepare-development:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      release-type: ${{ steps.version.outputs.release-type }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Generate version
        id: version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
          BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-.*//')

          # Get the latest release to determine next build number
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[0].tag_name // "v0.0.0"')
          echo "Latest release: $LATEST_RELEASE"

          # Extract build number from latest release or start from 1
          # Handle both old timestamp format and new semantic format
          if [[ $LATEST_RELEASE =~ v${BASE_VERSION}-(alpha|beta|dev)\.([0-9]{14}) ]]; then
            # Old timestamp format - start from 1
            BUILD_NUMBER=1
          elif [[ $LATEST_RELEASE =~ v${BASE_VERSION}-(alpha|beta|dev)\.([0-9]+) ]]; then
            # New semantic format - increment build number
            BUILD_NUMBER=$(( ${BASH_REMATCH[2]} + 1 ))
          else
            BUILD_NUMBER=1
          fi

          # Format build number with 4-digit padding
          PADDED_BUILD_NUMBER=$(printf "%04d" $BUILD_NUMBER)

          # PR to staging/dev: Create development version (early development)
          NEW_VERSION="${BASE_VERSION}-dev.${PADDED_BUILD_NUMBER}"
          RELEASE_TYPE="development"

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          echo "Release type: $RELEASE_TYPE"

      - name: Update package.json version
        run: |
          # Use jq to update package.json directly to preserve 4-digit padding
          jq --arg version "${{ steps.version.outputs.version }}" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Updated package.json to version ${{ steps.version.outputs.version }}"

      - name: Upload version files
        uses: actions/upload-artifact@v4
        with:
          name: version-files
          path: |
            package.json
            package-lock.json

  build-linux:
    runs-on: ubuntu-latest
    needs: prepare-development
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Build application (Linux)
        env:
          ELECTRON_BUILDER_VERSION: ${{ needs.prepare-development.outputs.version }}
        run: npm run build:linux-x64

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: |
            dist/*.AppImage
            dist/*.yml
            dist/*.blockmap

  build-windows:
    runs-on: windows-latest
    needs: prepare-development
    env:
      # Code signing disabled for all builds
      CSC_FOR_PULL_REQUEST: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      # Code signing disabled for all builds
      # - name: Setup Consistent Certificate from Secrets

      - name: Build application (Windows)
        env:
          ELECTRON_BUILDER_VERSION: ${{ needs.prepare-development.outputs.version }}
        run: npm run build:win

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            dist/*.exe
            dist/*.yml
            dist/*.blockmap

  build-macos:
    runs-on: macos-latest
    needs: prepare-development
    env:
      # Code signing disabled for all builds
      CSC_FOR_PULL_REQUEST: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      # Code signing disabled for all builds
      # - name: Setup Consistent Certificate from Secrets

      - name: Build application (macOS)
        env:
          ELECTRON_BUILDER_VERSION: ${{ needs.prepare-development.outputs.version }}
        run: npm run build:mac

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: |
            dist/*.dmg
            dist/*.zip
            dist/*.yml
            dist/*.blockmap

  create-release:
    runs-on: ubuntu-latest
    needs: [prepare-development, build-linux, build-windows, build-macos]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate release notes
        run: |
          # Get the base commit for comparison
          BASE_COMMIT="${{ github.event.pull_request.base.sha }}"
          HEAD_COMMIT="${{ github.event.pull_request.head.sha }}"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "## ðŸ”§ Development Release for PR #${{ github.event.number }}" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "This is a development release created automatically for early testing." >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "**PR:** #${{ github.event.number }}" >> $GITHUB_ENV
          echo "**Branch:** \`${{ github.head_ref }}\`" >> $GITHUB_ENV
          echo "**Target:** \`${{ github.base_ref }}\`" >> $GITHUB_ENV
          echo "**Auto-cleanup:** This release will be automatically deleted if PR #${{ github.event.number }} is closed without merging." >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "## Changes" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          ./scripts/generate-release-notes.sh $BASE_COMMIT $HEAD_COMMIT >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "## Testing" >> $GITHUB_ENV
          echo "Please test this development release and provide feedback in the PR comments." >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "## Installation" >> $GITHUB_ENV
          echo "Download the appropriate build for your platform from the assets below." >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "## Code Signing" >> $GITHUB_ENV
          echo "Code signing is disabled for all builds to speed up the build process and avoid certificate issues." >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create development release
        uses: softprops/action-gh-release@v2
        continue-on-error: true
        with:
          tag_name: 'v${{ needs.prepare-development.outputs.version }}'
          name: 'Development Release ${{ needs.prepare-development.outputs.version }}'
          target_commitish: ${{ github.event.pull_request.head.sha }}
          body: ${{ env.RELEASE_NOTES }}
          files: |
            linux-builds/*
            windows-builds/*
            macos-builds/*
          draft: false
          prerelease: true
          generate_release_notes: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ”§ **Development Release Created**
              
              Version: \`${{ needs.prepare-development.outputs.version }}\`
              
              A development release has been created for testing this PR. You can download it from the [releases page](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare-development.outputs.version }}).
              
              Please test the development release and provide feedback in the comments below.`
            })