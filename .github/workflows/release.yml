name: Build/release Electron app

on:
  push:
    branches:
      - main
  # Temporarily disabled for testing
  # push:
  #   tags:
  #     - v*.*.*
jobs:
  prepare-stable:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.stable-version.outputs.stable-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Generate stable version
        id: stable-version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
          BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-.*//')
          # For stable releases, use the base version (e.g., 2.0.0)
          STABLE_VERSION="${BASE_VERSION}"
          echo "stable-version=$STABLE_VERSION" >> $GITHUB_OUTPUT
          echo "Stable version: $STABLE_VERSION"

      - name: Update package.json version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          STABLE_VERSION="${{ steps.stable-version.outputs.stable-version }}"
          if [ "$CURRENT_VERSION" != "$STABLE_VERSION" ]; then
            npm version $STABLE_VERSION --no-git-tag-version
            echo "Updated package.json from $CURRENT_VERSION to $STABLE_VERSION"
          else
            echo "Version $STABLE_VERSION is already set, no update needed"
          fi

      - name: Upload version files
        uses: actions/upload-artifact@v4
        with:
          name: version-files
          path: |
            package.json
            package-lock.json

  Build:
    runs-on: ${{ matrix.os }}
    needs: prepare-stable
    permissions: write-all
    env:
      GH_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      # Code signing environment variables
      CSC_LINK: ${{ secrets.CSC_LINK }}
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            architecture: x64
          - os: ubuntu-latest
            architecture: x64
          - os: ubuntu-latest
            architecture: arm64
          - os: macos-14
            architecture: arm64
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm ci

      - name: Generate Self-Signed Certificates
        if: matrix.os == 'windows-latest' || matrix.os == 'macos-14'
        run: |
          # Create certificates directory
          mkdir -p certificates

          # Generate self-signed certificate
          openssl req -x509 -newkey rsa:2048 -keyout certificates/cert-key.pem -out certificates/cert.pem -days 365 -nodes -subj "/C=US/ST=CA/L=San Francisco/O=Comic Universe/CN=Comic Universe"

          # Convert to PKCS#12 format
          openssl pkcs12 -export -out certificates/cert.p12 -inkey certificates/cert-key.pem -in certificates/cert.pem -name "Comic Universe" -passout pass:comicuniverse

          # Set environment variables for electron-builder
          echo "CSC_LINK=certificates/cert.p12" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=comicuniverse" >> $GITHUB_ENV

      - name: build-linux-x64
        if: matrix.architecture == 'x64' && matrix.os == 'ubuntu-latest'
        run: npm run build:linux-x64

      - name: build-linux-arm
        if: matrix.architecture == 'arm64' && matrix.os == 'ubuntu-latest'
        run: npm run build:linux-arm

      - name: build-win
        if: matrix.os == 'windows-latest'
        run: npm run build:win

      - name: build-mac-universal
        if: matrix.architecture == 'arm64' && matrix.os == 'macos-14'
        run: npm run build:mac

      - name: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: 'v${{ needs.prepare-stable.outputs.version }}'
          name: 'Stable Release v${{ needs.prepare-stable.outputs.version }}'
          body: |
            ## ðŸš€ Stable Release v${{ needs.prepare-stable.outputs.version }}

            This is a stable release of Comic Universe 2.0.0.

            **Version:** ${{ needs.prepare-stable.outputs.version }}
            **Branch:** `${{ github.ref_name }}`
            **Commit:** `${{ github.sha }}`

            ## What's New in 2.0.0
            - Updated dependencies to latest versions
            - Improved CI/CD pipeline with automatic code signing
            - Enhanced development workflow
            - Better error handling and logging
            - Standardized release nomenclature (alpha/beta)

            ## Installation
            Download the appropriate build for your platform from the assets below.

            ## Code Signing
            All builds are automatically signed with self-signed certificates. Users may see security warnings - this is normal for self-signed certificates.

            ## Testing
            This is a stable release. Please test thoroughly and report any issues.
          files: |
            dist/*.exe
            dist/*.zip
            dist/*.dmg
            dist/*.AppImage
            dist/*.snap
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.yml
            dist/*.blockmap
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
