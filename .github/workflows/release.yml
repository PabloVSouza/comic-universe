name: Build/release Electron app

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
      - 'v*.*.*-alpha*'
      - 'v*.*.*-beta*'
jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release-version.outputs.release-version }}
      version-type: ${{ steps.release-version.outputs.version-type }}
      is-prerelease: ${{ steps.release-version.outputs.is-prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine release version and type
        id: release-version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
          
          # Check if this is a tag push or branch push
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            # This is a tag push - use the tag name
            TAG_NAME="${{ github.ref_name }}"
            RELEASE_VERSION="${TAG_NAME#v}"  # Remove 'v' prefix
            
            # Determine version type
            if [[ "$RELEASE_VERSION" == *"-alpha"* ]]; then
              VERSION_TYPE="alpha"
              IS_PRERELEASE="true"
            elif [[ "$RELEASE_VERSION" == *"-beta"* ]]; then
              VERSION_TYPE="beta"
              IS_PRERELEASE="true"
            else
              VERSION_TYPE="stable"
              IS_PRERELEASE="false"
            fi
          else
            # This is a branch push - use package.json version
            RELEASE_VERSION="$CURRENT_VERSION"
            BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-.*//')
            
            # For branch pushes, always treat as stable
            VERSION_TYPE="stable"
            IS_PRERELEASE="false"
            RELEASE_VERSION="${BASE_VERSION}"
          fi
          
          echo "release-version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "version-type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Release version: $RELEASE_VERSION"
          echo "Version type: $VERSION_TYPE"
          echo "Is prerelease: $IS_PRERELEASE"

      - name: Update package.json version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          RELEASE_VERSION="${{ steps.release-version.outputs.release-version }}"
          if [ "$CURRENT_VERSION" != "$RELEASE_VERSION" ]; then
            npm version $RELEASE_VERSION --no-git-tag-version
            echo "Updated package.json from $CURRENT_VERSION to $RELEASE_VERSION"
          else
            echo "Version $RELEASE_VERSION is already set, no update needed"
          fi

      - name: Upload version files
        uses: actions/upload-artifact@v4
        with:
          name: version-files
          path: |
            package.json
            package-lock.json

  Build:
    runs-on: ${{ matrix.os }}
    needs: prepare-release
    permissions: write-all
    env:
      GH_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      # Code signing environment variables
      CSC_LINK: ${{ secrets.CSC_LINK }}
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            architecture: x64
          - os: ubuntu-latest
            architecture: x64
          - os: ubuntu-latest
            architecture: arm64
          - os: macos-14
            architecture: arm64
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm ci

      - name: Generate Self-Signed Certificates
        if: matrix.os == 'windows-latest' || matrix.os == 'macos-14'
        run: |
          # Create certificates directory
          mkdir -p certificates
          
          # Generate self-signed certificate
          openssl req -x509 -newkey rsa:2048 -keyout certificates/cert-key.pem -out certificates/cert.pem -days 365 -nodes -subj "/C=US/ST=CA/L=San Francisco/O=Comic Universe/CN=Comic Universe"
          
          # Convert to PKCS#12 format
          openssl pkcs12 -export -out certificates/cert.p12 -inkey certificates/cert-key.pem -in certificates/cert.pem -name "Comic Universe" -passout pass:comicuniverse
          
          # Set environment variables for electron-builder
          echo "CSC_LINK=certificates/cert.p12" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=comicuniverse" >> $GITHUB_ENV

      - name: build-linux-x64
        if: matrix.architecture == 'x64' && matrix.os == 'ubuntu-latest'
        run: npm run build:linux-x64

      - name: build-linux-arm
        if: matrix.architecture == 'arm64' && matrix.os == 'ubuntu-latest'
        run: npm run build:linux-arm

      - name: build-win
        if: matrix.os == 'windows-latest'
        run: npm run build:win

      - name: build-mac-universal
        if: matrix.architecture == 'arm64' && matrix.os == 'macos-14'
        run: npm run build:mac

      - name: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: 'v${{ needs.prepare-release.outputs.version }}'
          name: '${{ needs.prepare-release.outputs.version-type == "stable" && "ðŸš€ Stable Release" || needs.prepare-release.outputs.version-type == "beta" && "ðŸ§ª Beta Release" || "âš¡ Alpha Release" }} v${{ needs.prepare-release.outputs.version }}'
          body: |
            ## ${{ needs.prepare-release.outputs.version-type == "stable" && "ðŸš€ Stable Release" || needs.prepare-release.outputs.version-type == "beta" && "ðŸ§ª Beta Release" || "âš¡ Alpha Release" }} v${{ needs.prepare-release.outputs.version }}

            ${{ needs.prepare-release.outputs.version-type == "stable" && "This is a stable release of Comic Universe." || needs.prepare-release.outputs.version-type == "beta" && "This is a beta release of Comic Universe. Please test thoroughly and report any issues." || "This is an alpha release of Comic Universe. This is experimental software - use at your own risk." }}

            **Version:** ${{ needs.prepare-release.outputs.version }}
            **Type:** ${{ needs.prepare-release.outputs.version-type }}
            **Branch:** `${{ github.ref_name }}`
            **Commit:** `${{ github.sha }}`

            ## What's New
            - Updated dependencies to latest versions
            - Improved CI/CD pipeline with automatic code signing
            - Enhanced development workflow
            - Better error handling and logging
            - Standardized release nomenclature (alpha/beta/stable)

            ## Installation
            Download the appropriate build for your platform from the assets below.

            ## Code Signing
            All builds are automatically signed with self-signed certificates. Users may see security warnings - this is normal for self-signed certificates.

            ## Testing
            ${{ needs.prepare-release.outputs.version-type == "stable" && "This is a stable release. Please test thoroughly and report any issues." || needs.prepare-release.outputs.version-type == "beta" && "This is a beta release. Please test thoroughly and report any issues." || "This is an alpha release. This is experimental software - use at your own risk." }}
          files: |
            dist/*.exe
            dist/*.zip
            dist/*.dmg
            dist/*.AppImage
            dist/*.snap
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.yml
            dist/*.blockmap
          draft: false
          prerelease: ${{ needs.prepare-release.outputs.is-prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
