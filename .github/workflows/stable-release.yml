name: Stable Release

on:
  push:
    branches:
      - main
  # Temporarily disabled for testing
  # push:
  #   tags:
  #     - v*.*.*
jobs:
  prepare-stable:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.stable-version.outputs.stable-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Generate stable version
        id: stable-version
        run: |
          # Get the latest stable release to determine next version
          LATEST_STABLE_RELEASE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[] | select(.prerelease == false) | .tag_name' | head -1)
          echo "Latest stable release: $LATEST_STABLE_RELEASE"
          
          # Extract version from stable release (remove 'v' prefix)
          if [[ $LATEST_STABLE_RELEASE =~ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            CURRENT_STABLE_VERSION="${BASH_REMATCH[1]}"
            echo "Current stable version: $CURRENT_STABLE_VERSION"
            
            # Increment patch version for next stable release
            # If current stable is 2.0.0, next stable should be 2.0.1
            STABLE_VERSION=$(echo $CURRENT_STABLE_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            echo "New stable version: $STABLE_VERSION"
          else
            # Fallback to current version if no stable release found
            CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
            BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-.*//')
            STABLE_VERSION=$(echo $BASE_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            echo "Fallback: Using current version $CURRENT_VERSION, new stable: $STABLE_VERSION"
          fi
          
          echo "stable-version=$STABLE_VERSION" >> $GITHUB_OUTPUT
          echo "Stable version: $STABLE_VERSION"

      - name: Update package.json version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          STABLE_VERSION="${{ steps.stable-version.outputs.stable-version }}"
          if [ "$CURRENT_VERSION" != "$STABLE_VERSION" ]; then
            # Use jq to update package.json directly to preserve version format
            jq --arg version "$STABLE_VERSION" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json
            echo "Updated package.json from $CURRENT_VERSION to $STABLE_VERSION"
          else
            echo "Version $STABLE_VERSION is already set, no update needed"
          fi

      - name: Upload version files
        uses: actions/upload-artifact@v4
        with:
          name: version-files
          path: |
            package.json
            package-lock.json

  build-linux:
    runs-on: ubuntu-latest
    needs: prepare-stable
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Build application (Linux x64)
        run: npm run build:linux-x64

      - name: Build application (Linux ARM64)
        run: npm run build:linux-arm

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: |
            dist/*.AppImage
            dist/*.yml
            dist/*.blockmap

  build-windows:
    runs-on: windows-latest
    needs: prepare-stable
    env:
      # Code signing disabled for all builds
      CSC_FOR_PULL_REQUEST: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      # Code signing disabled for all builds
      # - name: Setup Consistent Certificate from Secrets

      - name: Build application (Windows)
        run: npm run build:win

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            dist/*.exe
            dist/*.yml
            dist/*.blockmap

  build-macos:
    runs-on: macos-latest
    needs: prepare-stable
    env:
      # Code signing disabled for all builds
      CSC_FOR_PULL_REQUEST: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      # Code signing disabled for all builds
      # - name: Setup Consistent Certificate from Secrets

      - name: Build application (macOS)
        run: npm run build:mac

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: |
            dist/*.dmg
            dist/*.zip
            dist/*.yml
            dist/*.blockmap

  stable-release:
    runs-on: ubuntu-latest
    needs: [prepare-stable, build-linux, build-windows, build-macos]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate release notes
        run: |
          # Get the previous stable tag or use HEAD~20 as fallback
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match="v*.*.*" HEAD~1 2>/dev/null || echo "HEAD~20")
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "## ðŸš€ Stable Release v${{ needs.prepare-stable.outputs.version }}" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "This is a stable release of Comic Universe ${{ needs.prepare-stable.outputs.version }}." >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "**Version:** ${{ needs.prepare-stable.outputs.version }}" >> $GITHUB_ENV
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_ENV
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          ./scripts/generate-release-notes.sh $PREVIOUS_TAG HEAD >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "## Installation" >> $GITHUB_ENV
          echo "Download the appropriate build for your platform from the assets below." >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "## Code Signing" >> $GITHUB_ENV
          echo "Code signing is disabled for all builds to speed up the build process and avoid certificate issues." >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "## Testing" >> $GITHUB_ENV
          echo "This is a stable release. Please test thoroughly and report any issues." >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create stable release
        uses: softprops/action-gh-release@v2
        continue-on-error: true
        with:
          tag_name: 'v${{ needs.prepare-stable.outputs.version }}'
          name: 'Stable Release v${{ needs.prepare-stable.outputs.version }}'
          body: ${{ env.RELEASE_NOTES }}
          files: |
            linux-builds/*
            windows-builds/*
            macos-builds/*
          draft: false
          prerelease: false
          generate_release_notes: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
