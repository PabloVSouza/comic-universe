name: 2.0.0 Development Release

on:
  push:
    branches:
      - 'dev/v2.0.0'
  pull_request:
    branches:
      - 'dev/v2.0.0'

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.dev-version.outputs.version }}
      release-type: ${{ steps.dev-version.outputs.release-type }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Generate development version
        id: dev-version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
          BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-.*//')

          # Get all releases and find the highest version number for this base version
          ALL_RELEASES=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[].tag_name')
          echo "All releases: $ALL_RELEASES"
          
          # Find the highest build number for the current base version and release type
          MAX_BUILD_NUMBER=0
          for release in $ALL_RELEASES; do
            if [[ $release =~ v${BASE_VERSION}-(alpha|beta)\.([0-9]+) ]]; then
              BUILD_NUM=${BASH_REMATCH[2]}
              if [[ $BUILD_NUM -gt $MAX_BUILD_NUMBER ]]; then
                MAX_BUILD_NUMBER=$BUILD_NUM
              fi
            fi
          done
          
          # Increment the highest build number found
          BUILD_NUMBER=$((MAX_BUILD_NUMBER + 1))
          echo "Max build number found: $MAX_BUILD_NUMBER, next build number: $BUILD_NUMBER"

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # PR: Create alpha version (instÃ¡vel, em desenvolvimento)
            NEW_VERSION="${BASE_VERSION}-alpha.${BUILD_NUMBER}"
            RELEASE_TYPE="alpha"
          else
            # Push: Create beta version (mais estÃ¡vel, testado)
            NEW_VERSION="${BASE_VERSION}-beta.${BUILD_NUMBER}"
            RELEASE_TYPE="beta"
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          echo "Release type: $RELEASE_TYPE"

      - name: Update package.json version
        if: steps.dev-version.outputs.version != steps.current-version.outputs.current-version
        run: |
          npm version ${{ steps.dev-version.outputs.version }} --no-git-tag-version
          echo "Updated package.json to version ${{ steps.dev-version.outputs.version }}"

      - name: Upload version files
        uses: actions/upload-artifact@v4
        with:
          name: version-files
          path: |
            package.json
            package-lock.json

  build-linux:
    runs-on: ubuntu-latest
    needs: prepare-release
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Build application (Linux)
        run: npm run build:linux-x64

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: |
            dist/*.AppImage
            dist/*.yml
            dist/*.blockmap

  build-windows:
    runs-on: windows-latest
    needs: prepare-release
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Force code signing for PR builds
      CSC_FOR_PULL_REQUEST: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Setup Consistent Certificate from Secrets
        run: |
          mkdir -p certificates
          $bytes = [System.Convert]::FromBase64String("${{ secrets.CSC_LINK_BASE64 }}")
          [System.IO.File]::WriteAllBytes("certificates/cert.p12", $bytes)
          echo "CSC_LINK=certificates/cert.p12" >> $env:GITHUB_ENV
          echo "CSC_KEY_PASSWORD=${{ secrets.CSC_KEY_PASSWORD }}" >> $env:GITHUB_ENV

      - name: Build application (Windows)
        run: npm run build:win

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            dist/*.exe
            dist/*.yml
            dist/*.blockmap

  build-macos:
    runs-on: macos-latest
    needs: prepare-release
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Force code signing for PR builds
      CSC_FOR_PULL_REQUEST: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

        - name: Setup Consistent Certificate from Secrets
          run: |
            mkdir -p certificates
            echo "${{ secrets.CSC_LINK_BASE64 }}" | base64 --decode > certificates/cert.p12
            echo "CSC_LINK=certificates/cert.p12" >> $GITHUB_ENV
            echo "CSC_KEY_PASSWORD=${{ secrets.CSC_KEY_PASSWORD }}" >> $GITHUB_ENV
            security create-keychain -p "" build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "" build.keychain
            security import certificates/cert.p12 -k build.keychain -P "${{ secrets.CSC_KEY_PASSWORD }}" -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
            # Extract certificate and make it trusted
            openssl pkcs12 -in certificates/cert.p12 -out certificates/cert.pem -nokeys -passin pass:"${{ secrets.CSC_KEY_PASSWORD }}"
            security add-trusted-cert -d -r trustRoot -k build.keychain certificates/cert.pem

      - name: Build application (macOS)
        run: npm run build:mac

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: |
            dist/*.dmg
            dist/*.zip
            dist/*.yml
            dist/*.blockmap

  nightly-release:
    runs-on: ubuntu-latest
    needs: [prepare-release, build-linux, build-windows, build-macos]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Verify artifacts
        run: |
          echo "Checking downloaded artifacts..."
          ls -la
          echo "Linux builds:"
          ls -la linux-builds/ || echo "No linux-builds directory"
          echo "Windows builds:"
          ls -la windows-builds/ || echo "No windows-builds directory"
          echo "macOS builds:"
          ls -la macos-builds/ || echo "No macos-builds directory"

      - name: Generate release notes
        run: |
          # Get the base commit for comparison
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_COMMIT="${{ github.event.pull_request.base.sha }}"
            HEAD_COMMIT="${{ github.event.pull_request.head.sha }}"
          else
            # For push events, compare with previous commit
            BASE_COMMIT="HEAD~1"
            HEAD_COMMIT="HEAD"
          fi

          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "## ðŸš€ 2.0.0 Development Release" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "This is a development build for Comic Universe 2.0.0." >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "**Release Type:** ${{ needs.prepare-release.outputs.release-type }}" >> $GITHUB_ENV
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_ENV
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_ENV
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "**PR:** #${{ github.event.number }}" >> $GITHUB_ENV
            echo "**Auto-cleanup:** This release will be automatically deleted if PR #${{ github.event.number }} is closed without merging." >> $GITHUB_ENV
          fi
          echo "" >> $GITHUB_ENV
          echo "## Changes" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          ./scripts/generate-release-notes.sh $BASE_COMMIT $HEAD_COMMIT >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "## Testing" >> $GITHUB_ENV
          echo "This is a development build. Please test thoroughly and report any issues." >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "## Installation" >> $GITHUB_ENV
          echo "Download the appropriate build for your platform from the assets below." >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create development release
        if: needs.prepare-release.outputs.version != ''
        uses: softprops/action-gh-release@v2
        continue-on-error: true
        with:
          tag_name: 'v${{ needs.prepare-release.outputs.version }}'
          name: '2.0.0 Development Release ${{ needs.prepare-release.outputs.version }}'
          target_commitish: ${{ github.event.pull_request.head.sha || github.sha }}
          body: ${{ env.RELEASE_NOTES }}
          files: |
            linux-builds/*
            windows-builds/*
            macos-builds/*
          draft: false
          prerelease: true
          generate_release_notes: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **2.0.0 Development Release Created**
              
              Version: \`${{ needs.prepare-release.outputs.version }}\`
              Release Type: **${{ needs.prepare-release.outputs.release-type }}**
              
              A development build has been created for testing Comic Universe 2.0.0. 
              Download it from the [releases page](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare-release.outputs.version }}).
              
              Please test the new features and provide feedback!`
            })
